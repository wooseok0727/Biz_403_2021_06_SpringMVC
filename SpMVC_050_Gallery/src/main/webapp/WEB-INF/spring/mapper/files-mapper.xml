<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="com.callor.gallery.persistence.extend.FilesDao">
 
 	<select id="selectAll"></select>
 	<select id="findById" resultType="FilesDTO">
 		SELECT * FROM tbl_files
 		WHERE file_seq = #{file_seq}
 	
 	</select>
 	
 	<!-- 개별적으로 한개 데이터씩 Insert -->
 	<insert id="insert">
 		INSERT INTO tbl_files(file_gseq,file_originname,file_upname) 
		VALUES (#{file_gseq},#{file_originname},#{file_upname})		
 	</insert>
 	
 	<!-- 
 		file_seq 값이 있는(이미 저장된 데이터) 데이터를 추가하려고 할때
 		PK 값이 중복되어 내부에서 UNIQUE Exception이 발생하는데
 		이 Exception을 catch하여 Update로 전환하는 MySQL 고유 SQL 명령문을
 		사용하여 Insert OR Update를 수행하는 방법
 		
 		이 문법을 사용하기 위하여 file_seq 데이터를 INSERT하도록 하는
 		선행 코드가 필요하다 
 	-->
  	<insert id="insertOrUpdate">
 		INSERT INTO tbl_files(file_seq, file_gseq, file_originname, file_upname) 
		VALUES (#{file_seq}, #{file_gseq}, #{file_originname}, #{file_upname})
		ON DUPLICATE KEY UPDATE 
		file_gseq = #{file_gseq},
		file_originname = #{file_originname},
		file_upname = #{file_upname}		
 	</insert>
 	
 	<!-- List<DTO>에 담긴 데이터를 한꺼번에 Insert -->
 	<insert id="insertWithList">
 		INSERT INTO tbl_files(file_gseq,file_originname,file_upname) 
		VALUES
		<foreach collection="filesList" item="file" separator=", ">
		(#{file.file_gseq},#{file.file_originname},#{file.file_upname})
		</foreach> 
 	</insert>
 	
 	<!-- List<DTO>에 담긴 데이터를 Insert Or Update 수행하기 -->
 	<insert id="insertOrUpdateWithList">
 		INSERT INTO tbl_files(file_seq, file_gseq,file_originname,file_upname) 
		VALUES
		<foreach collection="filesList" item="file" separator=", ">
		(#{file.file_seq},#{file.file_gseq},#{file.file_originname},#{file.file_upname})
		</foreach> 
		AS NEW(f_seq, f_gseq, f_originname, f_upname)
		ON DUPLICATE KEY UPDATE
		file_gseq = f_gseq,
		file_originname = f_originname,
		file_upname = f_upname
 	</insert>
 	
 	<update id="update"></update>
 	
 	<delete id="delete">
 		DELETE FROM tbl_files
 		WHERE file_seq = #{file_seq}
 	</delete>
 	
 	<update id="create_table">
 		CREATE TABLE IF NOT EXISTS tbl_files (
			file_seq		BIGINT		AUTO_INCREMENT	PRIMARY KEY,
			file_gseq		BIGINT		NOT NULL,	
			file_originname	VARCHAR(256)	NOT NULL,
			file_upname		VARCHAR(256)	NOT NULL,
			CONSTRAINT FOREIGN KEY (file_gseq)
			REFERENCES tbl_gallery(g_seq)
			ON DELETE CASCADE	
		)
 	</update>
 
 </mapper> 